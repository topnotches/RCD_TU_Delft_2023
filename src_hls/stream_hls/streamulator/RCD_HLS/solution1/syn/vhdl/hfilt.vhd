-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hfilt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    src_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    src_TVALID : IN STD_LOGIC;
    src_TREADY : OUT STD_LOGIC;
    src_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    src_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    dst_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_TVALID : OUT STD_LOGIC;
    dst_TREADY : IN STD_LOGIC;
    dst_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of hfilt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hfilt_hfilt,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.156000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=689,HLS_SYN_LUT=3033,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal y : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal x : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal select_active_order : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_order : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal selection_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal selection_0_ce0 : STD_LOGIC;
    signal selection_0_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal selection_0_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal selection_0_ce1 : STD_LOGIC;
    signal selection_0_q1 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal buffer_r_ce0 : STD_LOGIC;
    signal buffer_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_r_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal buffer_r_ce1 : STD_LOGIC;
    signal buffer_r_we1 : STD_LOGIC;
    signal buffer_r_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal selection_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal selection_2_ce0 : STD_LOGIC;
    signal selection_2_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal selection_2_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal selection_2_ce1 : STD_LOGIC;
    signal selection_2_q1 : STD_LOGIC_VECTOR (1 downto 0);
    signal active_pixels_0_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal active_pixels_0_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal active_pixels_0_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal selection_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal selection_1_ce0 : STD_LOGIC;
    signal selection_1_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal selection_1_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal selection_1_ce1 : STD_LOGIC;
    signal selection_1_q1 : STD_LOGIC_VECTOR (1 downto 0);
    signal active_pixels_1_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal active_pixels_1_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal active_pixels_1_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal active_pixels_2_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal active_pixels_2_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal active_pixels_2_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal src_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dst_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_in_data_reg_1357 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in_keep_reg_1366 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_in_strb_reg_1371 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_in_user_reg_1376 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_in_last_reg_1384 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_in_id_reg_1393 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_in_dest_reg_1398 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_2_fu_347_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln58_2_reg_1403 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln58_3_fu_355_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln58_3_reg_1409 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln58_1_fu_381_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln58_1_reg_1445 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal selection_2_load_reg_1455 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln75_fu_444_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln75_reg_1466 : STD_LOGIC_VECTOR (11 downto 0);
    signal selection_1_load_1_reg_1471 : STD_LOGIC_VECTOR (1 downto 0);
    signal selection_0_load_1_reg_1478 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln119_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_1483 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln81_fu_638_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln81_reg_1488 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln84_fu_672_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln84_reg_1493 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln87_1_fu_695_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln87_1_reg_1499 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln83_1_fu_699_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln83_1_reg_1504 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_reg_1509 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_1514 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_1520 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln94_1_fu_763_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln94_1_reg_1525 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_reg_1530 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1535 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_1541 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln104_1_fu_827_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln104_1_reg_1546 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_16_fu_942_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_16_reg_1551 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal abscond_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal abscond_reg_1557 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_18_fu_1007_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_18_reg_1562 : STD_LOGIC_VECTOR (10 downto 0);
    signal abscond10_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal abscond10_reg_1568 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_fu_1072_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_20_reg_1573 : STD_LOGIC_VECTOR (10 downto 0);
    signal abscond13_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal abscond13_reg_1579 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_reg_1589 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln55_fu_1286_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln55_reg_1593 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln55_1_fu_1293_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln55_1_reg_1598 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln55_2_fu_1300_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln55_2_reg_1604 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln67_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_2_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_1_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_dst_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state6 : BOOLEAN;
    signal select_ln159_fu_1317_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln67_fu_483_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln67_1_fu_500_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln67_2_fu_518_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln70_fu_542_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln70_1_fu_554_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln70_2_fu_566_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln73_fu_590_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln73_1_fu_601_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln73_2_fu_612_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln67_1_fu_388_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln67_fu_398_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln67_fu_402_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln_fu_413_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln70_fu_423_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1_fu_434_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_16_fu_450_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln67_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_1_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln67_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_627_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_627_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_627_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_627_p5 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln70_1_fu_550_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln70_2_fu_562_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln87_fu_574_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_fu_642_p5 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln83_fu_653_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_661_p5 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln85_fu_676_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_684_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_684_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_684_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_684_p5 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln87_fu_680_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln84_fu_657_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_715_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_739_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln98_fu_749_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln95_2_fu_725_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_779_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_803_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln108_fu_813_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln105_2_fu_789_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_893_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln84_2_fu_900_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln84_1_fu_890_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln84_fu_904_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln83_2_fu_917_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln83_fu_887_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln83_fu_920_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln85_fu_910_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln84_3_fu_926_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln84_fu_930_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln83_1_fu_914_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln86_fu_936_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln_fu_958_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln95_fu_965_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln95_3_fu_955_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln95_fu_969_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln94_fu_982_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln94_1_fu_952_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln94_fu_985_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln96_fu_975_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln95_1_fu_991_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln95_fu_995_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln94_2_fu_979_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln97_fu_1001_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln1_fu_1023_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln105_fu_1030_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln105_3_fu_1020_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln105_fu_1034_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln104_fu_1047_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln104_1_fu_1017_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln104_fu_1050_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln106_fu_1040_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln105_1_fu_1056_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln105_fu_1060_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln104_2_fu_1044_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln107_fu_1066_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_17_fu_1093_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal red_sum_fu_1098_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_19_fu_1108_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal green_sum_fu_1113_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_21_fu_1123_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal blue_sum_fu_1128_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_1138_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln111_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln111_fu_1104_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_1162_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln112_fu_1172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln112_fu_1119_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_1186_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln113_fu_1196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln113_fu_1134_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal blue_fu_1202_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal green_fu_1178_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal red_fu_1154_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal dn_fu_1210_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln58_fu_1086_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_1224_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln119_1_fu_1234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln119_fu_1240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln116_fu_1220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln147_fu_1259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln153_fu_1264_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln146_fu_1253_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln157_fu_1277_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln147_fu_1269_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln159_fu_1307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln165_fu_1312_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal regslice_both_src_V_data_V_U_apdone_blk : STD_LOGIC;
    signal src_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal src_TVALID_int_regslice : STD_LOGIC;
    signal src_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_src_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal src_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_src_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal src_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_src_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_user_V_U_apdone_blk : STD_LOGIC;
    signal src_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_last_V_U_apdone_blk : STD_LOGIC;
    signal src_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_id_V_U_apdone_blk : STD_LOGIC;
    signal src_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal src_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_dest_V_U_ack_in : STD_LOGIC;
    signal dst_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_TVALID_int_regslice : STD_LOGIC;
    signal dst_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_dst_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hfilt_mux_3_2_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component hfilt_selection_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component hfilt_buffer_r_RAM_2P_LUTRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hfilt_selection_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component hfilt_selection_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component hfilt_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    selection_0_U : component hfilt_selection_0_ROM_AUTO_1R
    generic map (
        DataWidth => 2,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => selection_0_address0,
        ce0 => selection_0_ce0,
        q0 => selection_0_q0,
        address1 => selection_0_address1,
        ce1 => selection_0_ce1,
        q1 => selection_0_q1);

    buffer_r_U : component hfilt_buffer_r_RAM_2P_LUTRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 3840,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_r_address0,
        ce0 => buffer_r_ce0,
        q0 => buffer_r_q0,
        address1 => buffer_r_address1,
        ce1 => buffer_r_ce1,
        we1 => buffer_r_we1,
        d1 => p_in_data_reg_1357,
        q1 => buffer_r_q1);

    selection_2_U : component hfilt_selection_2_ROM_AUTO_1R
    generic map (
        DataWidth => 2,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => selection_2_address0,
        ce0 => selection_2_ce0,
        q0 => selection_2_q0,
        address1 => selection_2_address1,
        ce1 => selection_2_ce1,
        q1 => selection_2_q1);

    selection_1_U : component hfilt_selection_1_ROM_AUTO_1R
    generic map (
        DataWidth => 2,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => selection_1_address0,
        ce0 => selection_1_ce0,
        q0 => selection_1_q0,
        address1 => selection_1_address1,
        ce1 => selection_1_ce1,
        q1 => selection_1_q1);

    mux_3_2_24_1_1_U1 : component hfilt_mux_3_2_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => tmp_1_fu_627_p1,
        din1 => tmp_1_fu_627_p2,
        din2 => tmp_1_fu_627_p3,
        din3 => selection_1_load_1_reg_1471,
        dout => tmp_1_fu_627_p5);

    mux_3_2_24_1_1_U2 : component hfilt_mux_3_2_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => trunc_ln70_1_fu_550_p1,
        din1 => trunc_ln70_2_fu_562_p1,
        din2 => trunc_ln87_fu_574_p1,
        din3 => selection_0_load_1_reg_1478,
        dout => tmp_2_fu_642_p5);

    mux_3_2_24_1_1_U3 : component hfilt_mux_3_2_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => trunc_ln70_1_fu_550_p1,
        din1 => trunc_ln70_2_fu_562_p1,
        din2 => trunc_ln87_fu_574_p1,
        din3 => selection_1_load_1_reg_1471,
        dout => tmp_3_fu_661_p5);

    mux_3_2_24_1_1_U4 : component hfilt_mux_3_2_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => tmp_5_fu_684_p1,
        din1 => tmp_5_fu_684_p2,
        din2 => tmp_5_fu_684_p3,
        din3 => selection_1_load_1_reg_1471,
        dout => tmp_5_fu_684_p5);

    regslice_both_src_V_data_V_U : component hfilt_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TDATA,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_data_V_U_ack_in,
        data_out => src_TDATA_int_regslice,
        vld_out => src_TVALID_int_regslice,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_data_V_U_apdone_blk);

    regslice_both_src_V_keep_V_U : component hfilt_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TKEEP,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_keep_V_U_ack_in,
        data_out => src_TKEEP_int_regslice,
        vld_out => regslice_both_src_V_keep_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_keep_V_U_apdone_blk);

    regslice_both_src_V_strb_V_U : component hfilt_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TSTRB,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_strb_V_U_ack_in,
        data_out => src_TSTRB_int_regslice,
        vld_out => regslice_both_src_V_strb_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_strb_V_U_apdone_blk);

    regslice_both_src_V_user_V_U : component hfilt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TUSER,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_user_V_U_ack_in,
        data_out => src_TUSER_int_regslice,
        vld_out => regslice_both_src_V_user_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_user_V_U_apdone_blk);

    regslice_both_src_V_last_V_U : component hfilt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TLAST,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_last_V_U_ack_in,
        data_out => src_TLAST_int_regslice,
        vld_out => regslice_both_src_V_last_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_last_V_U_apdone_blk);

    regslice_both_src_V_id_V_U : component hfilt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TID,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_id_V_U_ack_in,
        data_out => src_TID_int_regslice,
        vld_out => regslice_both_src_V_id_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_id_V_U_apdone_blk);

    regslice_both_src_V_dest_V_U : component hfilt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TDEST,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_dest_V_U_ack_in,
        data_out => src_TDEST_int_regslice,
        vld_out => regslice_both_src_V_dest_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_dest_V_U_apdone_blk);

    regslice_both_dst_V_data_V_U : component hfilt_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dst_TDATA_int_regslice,
        vld_in => dst_TVALID_int_regslice,
        ack_in => dst_TREADY_int_regslice,
        data_out => dst_TDATA,
        vld_out => regslice_both_dst_V_data_V_U_vld_out,
        ack_out => dst_TREADY,
        apdone_blk => regslice_both_dst_V_data_V_U_apdone_blk);

    regslice_both_dst_V_keep_V_U : component hfilt_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_in_keep_reg_1366,
        vld_in => dst_TVALID_int_regslice,
        ack_in => regslice_both_dst_V_keep_V_U_ack_in_dummy,
        data_out => dst_TKEEP,
        vld_out => regslice_both_dst_V_keep_V_U_vld_out,
        ack_out => dst_TREADY,
        apdone_blk => regslice_both_dst_V_keep_V_U_apdone_blk);

    regslice_both_dst_V_strb_V_U : component hfilt_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_in_strb_reg_1371,
        vld_in => dst_TVALID_int_regslice,
        ack_in => regslice_both_dst_V_strb_V_U_ack_in_dummy,
        data_out => dst_TSTRB,
        vld_out => regslice_both_dst_V_strb_V_U_vld_out,
        ack_out => dst_TREADY,
        apdone_blk => regslice_both_dst_V_strb_V_U_apdone_blk);

    regslice_both_dst_V_user_V_U : component hfilt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_in_user_reg_1376,
        vld_in => dst_TVALID_int_regslice,
        ack_in => regslice_both_dst_V_user_V_U_ack_in_dummy,
        data_out => dst_TUSER,
        vld_out => regslice_both_dst_V_user_V_U_vld_out,
        ack_out => dst_TREADY,
        apdone_blk => regslice_both_dst_V_user_V_U_apdone_blk);

    regslice_both_dst_V_last_V_U : component hfilt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_in_last_reg_1384,
        vld_in => dst_TVALID_int_regslice,
        ack_in => regslice_both_dst_V_last_V_U_ack_in_dummy,
        data_out => dst_TLAST,
        vld_out => regslice_both_dst_V_last_V_U_vld_out,
        ack_out => dst_TREADY,
        apdone_blk => regslice_both_dst_V_last_V_U_apdone_blk);

    regslice_both_dst_V_id_V_U : component hfilt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_in_id_reg_1393,
        vld_in => dst_TVALID_int_regslice,
        ack_in => regslice_both_dst_V_id_V_U_ack_in_dummy,
        data_out => dst_TID,
        vld_out => regslice_both_dst_V_id_V_U_vld_out,
        ack_out => dst_TREADY,
        apdone_blk => regslice_both_dst_V_id_V_U_apdone_blk);

    regslice_both_dst_V_dest_V_U : component hfilt_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_in_dest_reg_1398,
        vld_in => dst_TVALID_int_regslice,
        ack_in => regslice_both_dst_V_dest_V_U_ack_in_dummy,
        data_out => dst_TDEST,
        vld_out => regslice_both_dst_V_dest_V_U_vld_out,
        ack_out => dst_TREADY,
        apdone_blk => regslice_both_dst_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                abscond10_reg_1568 <= abscond10_fu_1011_p2;
                abscond13_reg_1579 <= abscond13_fu_1076_p2;
                abscond_reg_1557 <= abscond_fu_946_p2;
                empty_16_reg_1551 <= empty_16_fu_942_p1;
                empty_18_reg_1562 <= empty_18_fu_1007_p1;
                empty_20_reg_1573 <= empty_20_fu_1072_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                active_pixels_0_0 <= select_ln67_fu_483_p3;
                active_pixels_0_1 <= select_ln67_1_fu_500_p3;
                active_pixels_0_2 <= select_ln67_2_fu_518_p3;
                active_pixels_1_0 <= select_ln70_fu_542_p3;
                active_pixels_1_1 <= select_ln70_1_fu_554_p3;
                active_pixels_1_2 <= select_ln70_2_fu_566_p3;
                active_pixels_2_0 <= select_ln73_fu_590_p3;
                active_pixels_2_1 <= select_ln73_1_fu_601_p3;
                active_pixels_2_2 <= select_ln73_2_fu_612_p3;
                add_ln104_1_reg_1546 <= add_ln104_1_fu_827_p2;
                add_ln83_1_reg_1504 <= add_ln83_1_fu_699_p2;
                add_ln94_1_reg_1525 <= add_ln94_1_fu_763_p2;
                tmp_11_reg_1535 <= tmp_3_fu_661_p5(23 downto 16);
                tmp_13_reg_1541 <= tmp_5_fu_684_p5(23 downto 16);
                tmp_6_reg_1514 <= tmp_3_fu_661_p5(15 downto 8);
                tmp_8_reg_1520 <= tmp_5_fu_684_p5(15 downto 8);
                tmp_9_reg_1530 <= tmp_1_fu_627_p5(23 downto 16);
                tmp_s_reg_1509 <= tmp_1_fu_627_p5(15 downto 8);
                trunc_ln81_reg_1488 <= trunc_ln81_fu_638_p1;
                trunc_ln84_reg_1493 <= trunc_ln84_fu_672_p1;
                trunc_ln87_1_reg_1499 <= trunc_ln87_1_fu_695_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln75_reg_1466 <= add_ln75_fu_444_p2;
                icmp_ln119_reg_1483 <= icmp_ln119_fu_460_p2;
                select_ln58_1_reg_1445 <= select_ln58_1_fu_381_p3;
                selection_0_load_1_reg_1478 <= selection_0_q0;
                selection_1_load_1_reg_1471 <= selection_1_q0;
                selection_2_load_reg_1455 <= selection_2_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                or_ln55_reg_1589 <= or_ln55_fu_1282_p2;
                select_ln55_1_reg_1598 <= select_ln55_1_fu_1293_p3;
                select_ln55_2_reg_1604 <= select_ln55_2_fu_1300_p3;
                select_ln55_reg_1593 <= select_ln55_fu_1286_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                p_in_data_reg_1357 <= src_TDATA_int_regslice;
                p_in_dest_reg_1398 <= src_TDEST_int_regslice;
                p_in_id_reg_1393 <= src_TID_int_regslice;
                p_in_keep_reg_1366 <= src_TKEEP_int_regslice;
                p_in_last_reg_1384 <= src_TLAST_int_regslice;
                p_in_strb_reg_1371 <= src_TSTRB_int_regslice;
                p_in_user_reg_1376 <= src_TUSER_int_regslice;
                select_ln58_2_reg_1403 <= select_ln58_2_fu_347_p3;
                select_ln58_3_reg_1409 <= select_ln58_3_fu_355_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((dst_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state6))) and (or_ln55_reg_1589 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((dst_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state6))) and (or_ln55_reg_1589 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then
                select_active_order <= select_ln159_fu_1317_p3;
                x <= select_ln55_1_reg_1598;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((dst_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state6))) and (or_ln55_reg_1589 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                select_order <= select_ln55_2_reg_1604;
                y <= select_ln55_reg_1593;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state6, src_TVALID_int_regslice, dst_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((src_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((dst_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((dst_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state6))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    abscond10_fu_1011_p2 <= "1" when (signed(sub_ln97_fu_1001_p2) > signed(ap_const_lv12_0)) else "0";
    abscond13_fu_1076_p2 <= "1" when (signed(sub_ln107_fu_1066_p2) > signed(ap_const_lv12_0)) else "0";
    abscond_fu_946_p2 <= "1" when (signed(sub_ln86_fu_936_p2) > signed(ap_const_lv12_0)) else "0";
    add_ln104_1_fu_827_p2 <= std_logic_vector(unsigned(zext_ln108_fu_813_p1) + unsigned(zext_ln105_2_fu_789_p1));
    add_ln104_fu_1050_p2 <= std_logic_vector(unsigned(zext_ln104_fu_1047_p1) + unsigned(zext_ln104_1_fu_1017_p1));
    add_ln105_fu_1034_p2 <= std_logic_vector(unsigned(zext_ln105_fu_1030_p1) + unsigned(zext_ln105_3_fu_1020_p1));
    add_ln146_fu_1253_p2 <= std_logic_vector(unsigned(select_ln58_fu_1086_p3) + unsigned(ap_const_lv16_1));
    add_ln153_fu_1264_p2 <= std_logic_vector(unsigned(select_ln58_3_reg_1409) + unsigned(ap_const_lv8_1));
    add_ln157_fu_1277_p2 <= std_logic_vector(unsigned(select_ln58_1_reg_1445) + unsigned(ap_const_lv16_1));
    add_ln165_fu_1312_p2 <= std_logic_vector(unsigned(select_ln58_2_reg_1403) + unsigned(ap_const_lv8_1));
    add_ln67_fu_402_p2 <= std_logic_vector(unsigned(or_ln67_1_fu_388_p4) + unsigned(trunc_ln67_fu_398_p1));
    add_ln70_fu_423_p2 <= std_logic_vector(unsigned(or_ln_fu_413_p4) + unsigned(trunc_ln67_fu_398_p1));
    add_ln75_fu_444_p2 <= std_logic_vector(unsigned(or_ln1_fu_434_p4) + unsigned(trunc_ln67_fu_398_p1));
    add_ln83_1_fu_699_p2 <= std_logic_vector(unsigned(zext_ln87_fu_680_p1) + unsigned(zext_ln84_fu_657_p1));
    add_ln83_fu_920_p2 <= std_logic_vector(unsigned(zext_ln83_2_fu_917_p1) + unsigned(zext_ln83_fu_887_p1));
    add_ln84_fu_904_p2 <= std_logic_vector(unsigned(zext_ln84_2_fu_900_p1) + unsigned(zext_ln84_1_fu_890_p1));
    add_ln94_1_fu_763_p2 <= std_logic_vector(unsigned(zext_ln98_fu_749_p1) + unsigned(zext_ln95_2_fu_725_p1));
    add_ln94_fu_985_p2 <= std_logic_vector(unsigned(zext_ln94_fu_982_p1) + unsigned(zext_ln94_1_fu_952_p1));
    add_ln95_fu_969_p2 <= std_logic_vector(unsigned(zext_ln95_fu_965_p1) + unsigned(zext_ln95_3_fu_955_p1));
    and_ln1_fu_1023_p3 <= (tmp_11_reg_1535 & ap_const_lv2_0);
    and_ln_fu_958_p3 <= (tmp_6_reg_1514 & ap_const_lv2_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(src_TVALID_int_regslice)
    begin
        if ((src_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(dst_TREADY_int_regslice)
    begin
        if ((dst_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(ap_block_state6, dst_TREADY_int_regslice)
    begin
        if (((dst_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state6))) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state6_assign_proc : process(regslice_both_dst_V_data_V_U_apdone_blk, dst_TREADY_int_regslice)
    begin
                ap_block_state6 <= ((dst_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_dst_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    blue_fu_1202_p3 <= 
        ap_const_lv8_FF when (icmp_ln113_fu_1196_p2(0) = '1') else 
        trunc_ln113_fu_1134_p1;
    blue_sum_fu_1128_p3 <= 
        empty_20_reg_1573 when (abscond13_reg_1579(0) = '1') else 
        empty_21_fu_1123_p2;
    buffer_r_address0 <= zext_ln70_fu_429_p1(12 - 1 downto 0);

    buffer_r_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln67_1_fu_408_p1, zext_ln75_fu_623_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_r_address1 <= zext_ln75_fu_623_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_r_address1 <= zext_ln67_1_fu_408_p1(12 - 1 downto 0);
        else 
            buffer_r_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    buffer_r_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            buffer_r_ce1 <= ap_const_logic_1;
        else 
            buffer_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_we1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_r_we1 <= ap_const_logic_1;
        else 
            buffer_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dn_fu_1210_p4 <= ((blue_fu_1202_p3 & green_fu_1178_p3) & red_fu_1154_p3);

    dst_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, dst_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dst_TDATA_blk_n <= dst_TREADY_int_regslice;
        else 
            dst_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_TDATA_int_regslice <= 
        p_in_data_reg_1357 when (or_ln119_fu_1240_p2(0) = '1') else 
        zext_ln116_fu_1220_p1;
    dst_TVALID <= regslice_both_dst_V_data_V_U_vld_out;

    dst_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state5, dst_TREADY_int_regslice)
    begin
        if (((dst_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dst_TVALID_int_regslice <= ap_const_logic_1;
        else 
            dst_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    empty_16_fu_942_p1 <= sub_ln86_fu_936_p2(11 - 1 downto 0);
    empty_17_fu_1093_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(empty_16_reg_1551));
    empty_18_fu_1007_p1 <= sub_ln97_fu_1001_p2(11 - 1 downto 0);
    empty_19_fu_1108_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(empty_18_reg_1562));
    empty_20_fu_1072_p1 <= sub_ln107_fu_1066_p2(11 - 1 downto 0);
    empty_21_fu_1123_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(empty_20_reg_1573));
    green_fu_1178_p3 <= 
        ap_const_lv8_FF when (icmp_ln112_fu_1172_p2(0) = '1') else 
        trunc_ln112_fu_1119_p1;
    green_sum_fu_1113_p3 <= 
        empty_18_reg_1562 when (abscond10_reg_1568(0) = '1') else 
        empty_19_fu_1108_p2;
    icmp_ln111_fu_1148_p2 <= "0" when (tmp_fu_1138_p4 = ap_const_lv3_0) else "1";
    icmp_ln112_fu_1172_p2 <= "0" when (tmp_14_fu_1162_p4 = ap_const_lv3_0) else "1";
    icmp_ln113_fu_1196_p2 <= "0" when (tmp_15_fu_1186_p4 = ap_const_lv3_0) else "1";
    icmp_ln119_1_fu_1234_p2 <= "1" when (tmp_17_fu_1224_p4 = ap_const_lv15_0) else "0";
    icmp_ln119_fu_460_p2 <= "1" when (tmp_16_fu_450_p4 = ap_const_lv15_0) else "0";
    icmp_ln147_fu_1259_p2 <= "1" when (select_ln58_3_reg_1409 = ap_const_lv8_2) else "0";
    icmp_ln159_fu_1307_p2 <= "1" when (select_ln58_2_reg_1403 = ap_const_lv8_2) else "0";
    icmp_ln67_1_fu_495_p2 <= "1" when (selection_2_load_reg_1455 = ap_const_lv2_1) else "0";
    icmp_ln67_fu_478_p2 <= "1" when (selection_2_load_reg_1455 = ap_const_lv2_0) else "0";
    or_ln119_fu_1240_p2 <= (icmp_ln119_reg_1483 or icmp_ln119_1_fu_1234_p2);
    or_ln1_fu_434_p4 <= ((selection_2_q0 & selection_2_q0) & ap_const_lv8_0);
    or_ln55_fu_1282_p2 <= (p_in_user_reg_1376 or p_in_last_reg_1384);
    or_ln67_1_fu_388_p4 <= ((selection_0_q1 & selection_0_q1) & ap_const_lv8_0);
    or_ln67_fu_512_p2 <= (icmp_ln67_fu_478_p2 or icmp_ln67_1_fu_495_p2);
    or_ln_fu_413_p4 <= ((selection_1_q1 & selection_1_q1) & ap_const_lv8_0);
    red_fu_1154_p3 <= 
        ap_const_lv8_FF when (icmp_ln111_fu_1148_p2(0) = '1') else 
        trunc_ln111_fu_1104_p1;
    red_sum_fu_1098_p3 <= 
        empty_16_reg_1551 when (abscond_reg_1557(0) = '1') else 
        empty_17_fu_1093_p2;
    select_ln147_fu_1269_p3 <= 
        ap_const_lv8_0 when (icmp_ln147_fu_1259_p2(0) = '1') else 
        add_ln153_fu_1264_p2;
    select_ln159_fu_1317_p3 <= 
        ap_const_lv8_0 when (icmp_ln159_fu_1307_p2(0) = '1') else 
        add_ln165_fu_1312_p2;
    select_ln55_1_fu_1293_p3 <= 
        ap_const_lv16_0 when (p_in_last_reg_1384(0) = '1') else 
        add_ln157_fu_1277_p2;
    select_ln55_2_fu_1300_p3 <= 
        select_ln147_fu_1269_p3 when (p_in_last_reg_1384(0) = '1') else 
        ap_const_lv8_0;
    select_ln55_fu_1286_p3 <= 
        add_ln146_fu_1253_p2 when (p_in_last_reg_1384(0) = '1') else 
        ap_const_lv16_0;
    select_ln58_1_fu_381_p3 <= 
        ap_const_lv16_0 when (p_in_user_reg_1376(0) = '1') else 
        x;
    select_ln58_2_fu_347_p3 <= 
        ap_const_lv8_0 when (src_TUSER_int_regslice(0) = '1') else 
        select_active_order;
    select_ln58_3_fu_355_p3 <= 
        ap_const_lv8_0 when (src_TUSER_int_regslice(0) = '1') else 
        select_order;
    select_ln58_fu_1086_p3 <= 
        ap_const_lv16_0 when (p_in_user_reg_1376(0) = '1') else 
        y;
    select_ln67_1_fu_500_p3 <= 
        buffer_r_q1 when (icmp_ln67_1_fu_495_p2(0) = '1') else 
        active_pixels_0_1;
    select_ln67_2_fu_518_p3 <= 
        active_pixels_0_2 when (or_ln67_fu_512_p2(0) = '1') else 
        buffer_r_q1;
    select_ln67_fu_483_p3 <= 
        buffer_r_q1 when (icmp_ln67_fu_478_p2(0) = '1') else 
        active_pixels_0_0;
    select_ln70_1_fu_554_p3 <= 
        buffer_r_q0 when (icmp_ln67_1_fu_495_p2(0) = '1') else 
        active_pixels_1_1;
    select_ln70_2_fu_566_p3 <= 
        active_pixels_1_2 when (or_ln67_fu_512_p2(0) = '1') else 
        buffer_r_q0;
    select_ln70_fu_542_p3 <= 
        buffer_r_q0 when (icmp_ln67_fu_478_p2(0) = '1') else 
        active_pixels_1_0;
    select_ln73_1_fu_601_p3 <= 
        p_in_data_reg_1357 when (icmp_ln67_1_fu_495_p2(0) = '1') else 
        active_pixels_2_1;
    select_ln73_2_fu_612_p3 <= 
        active_pixels_2_2 when (or_ln67_fu_512_p2(0) = '1') else 
        p_in_data_reg_1357;
    select_ln73_fu_590_p3 <= 
        p_in_data_reg_1357 when (icmp_ln67_fu_478_p2(0) = '1') else 
        active_pixels_2_0;
    selection_0_address0 <= zext_ln67_2_fu_370_p1(2 - 1 downto 0);
    selection_0_address1 <= zext_ln67_fu_363_p1(2 - 1 downto 0);

    selection_0_ce0_assign_proc : process(ap_CS_fsm_state1, src_TVALID_int_regslice)
    begin
        if (((src_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            selection_0_ce0 <= ap_const_logic_1;
        else 
            selection_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    selection_0_ce1_assign_proc : process(ap_CS_fsm_state1, src_TVALID_int_regslice)
    begin
        if (((src_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            selection_0_ce1 <= ap_const_logic_1;
        else 
            selection_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    selection_1_address0 <= zext_ln67_2_fu_370_p1(2 - 1 downto 0);
    selection_1_address1 <= zext_ln67_fu_363_p1(2 - 1 downto 0);

    selection_1_ce0_assign_proc : process(ap_CS_fsm_state1, src_TVALID_int_regslice)
    begin
        if (((src_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            selection_1_ce0 <= ap_const_logic_1;
        else 
            selection_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    selection_1_ce1_assign_proc : process(ap_CS_fsm_state1, src_TVALID_int_regslice)
    begin
        if (((src_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            selection_1_ce1 <= ap_const_logic_1;
        else 
            selection_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    selection_2_address0 <= zext_ln67_fu_363_p1(2 - 1 downto 0);
    selection_2_address1 <= zext_ln67_2_fu_370_p1(2 - 1 downto 0);

    selection_2_ce0_assign_proc : process(ap_CS_fsm_state1, src_TVALID_int_regslice)
    begin
        if (((src_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            selection_2_ce0 <= ap_const_logic_1;
        else 
            selection_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    selection_2_ce1_assign_proc : process(ap_CS_fsm_state1, src_TVALID_int_regslice)
    begin
        if (((src_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            selection_2_ce1 <= ap_const_logic_1;
        else 
            selection_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_893_p3 <= (trunc_ln84_reg_1493 & ap_const_lv2_0);

    src_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, src_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            src_TDATA_blk_n <= src_TVALID_int_regslice;
        else 
            src_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    src_TREADY <= regslice_both_src_V_data_V_U_ack_in;

    src_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, src_TVALID_int_regslice)
    begin
        if (((src_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_TREADY_int_regslice <= ap_const_logic_1;
        else 
            src_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln105_fu_1060_p2 <= std_logic_vector(unsigned(zext_ln106_fu_1040_p1) - unsigned(zext_ln105_1_fu_1056_p1));
    sub_ln107_fu_1066_p2 <= std_logic_vector(unsigned(sub_ln105_fu_1060_p2) - unsigned(zext_ln104_2_fu_1044_p1));
    sub_ln84_fu_930_p2 <= std_logic_vector(unsigned(zext_ln85_fu_910_p1) - unsigned(zext_ln84_3_fu_926_p1));
    sub_ln86_fu_936_p2 <= std_logic_vector(unsigned(sub_ln84_fu_930_p2) - unsigned(zext_ln83_1_fu_914_p1));
    sub_ln95_fu_995_p2 <= std_logic_vector(unsigned(zext_ln96_fu_975_p1) - unsigned(zext_ln95_1_fu_991_p1));
    sub_ln97_fu_1001_p2 <= std_logic_vector(unsigned(sub_ln95_fu_995_p2) - unsigned(zext_ln94_2_fu_979_p1));
    tmp_10_fu_779_p4 <= tmp_2_fu_642_p5(23 downto 16);
    tmp_12_fu_803_p4 <= buffer_r_q0(23 downto 16);
    tmp_14_fu_1162_p4 <= green_sum_fu_1113_p3(10 downto 8);
    tmp_15_fu_1186_p4 <= blue_sum_fu_1128_p3(10 downto 8);
    tmp_16_fu_450_p4 <= select_ln58_1_fu_381_p3(15 downto 1);
    tmp_17_fu_1224_p4 <= select_ln58_fu_1086_p3(15 downto 1);
    tmp_1_fu_627_p1 <= select_ln67_fu_483_p3(24 - 1 downto 0);
    tmp_1_fu_627_p2 <= select_ln67_1_fu_500_p3(24 - 1 downto 0);
    tmp_1_fu_627_p3 <= select_ln67_2_fu_518_p3(24 - 1 downto 0);
    tmp_4_fu_715_p4 <= tmp_2_fu_642_p5(15 downto 8);
    tmp_5_fu_684_p1 <= select_ln73_fu_590_p3(24 - 1 downto 0);
    tmp_5_fu_684_p2 <= select_ln73_1_fu_601_p3(24 - 1 downto 0);
    tmp_5_fu_684_p3 <= select_ln73_2_fu_612_p3(24 - 1 downto 0);
    tmp_7_fu_739_p4 <= buffer_r_q0(15 downto 8);
    tmp_fu_1138_p4 <= red_sum_fu_1098_p3(10 downto 8);
    trunc_ln111_fu_1104_p1 <= red_sum_fu_1098_p3(8 - 1 downto 0);
    trunc_ln112_fu_1119_p1 <= green_sum_fu_1113_p3(8 - 1 downto 0);
    trunc_ln113_fu_1134_p1 <= blue_sum_fu_1128_p3(8 - 1 downto 0);
    trunc_ln67_fu_398_p1 <= select_ln58_1_fu_381_p3(12 - 1 downto 0);
    trunc_ln70_1_fu_550_p1 <= select_ln70_fu_542_p3(24 - 1 downto 0);
    trunc_ln70_2_fu_562_p1 <= select_ln70_1_fu_554_p3(24 - 1 downto 0);
    trunc_ln81_fu_638_p1 <= tmp_1_fu_627_p5(8 - 1 downto 0);
    trunc_ln83_fu_653_p1 <= tmp_2_fu_642_p5(8 - 1 downto 0);
    trunc_ln84_fu_672_p1 <= tmp_3_fu_661_p5(8 - 1 downto 0);
    trunc_ln85_fu_676_p1 <= buffer_r_q0(8 - 1 downto 0);
    trunc_ln87_1_fu_695_p1 <= tmp_5_fu_684_p5(8 - 1 downto 0);
    trunc_ln87_fu_574_p1 <= select_ln70_2_fu_566_p3(24 - 1 downto 0);
    zext_ln104_1_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_1530),10));
    zext_ln104_2_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_1541),12));
    zext_ln104_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_1_reg_1546),10));
    zext_ln105_1_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_fu_1050_p2),12));
    zext_ln105_2_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_779_p4),9));
    zext_ln105_3_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_1535),11));
    zext_ln105_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln1_fu_1023_p3),11));
    zext_ln106_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln105_fu_1034_p2),12));
    zext_ln108_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_803_p4),9));
    zext_ln116_fu_1220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dn_fu_1210_p4),32));
    zext_ln67_1_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_fu_402_p2),64));
    zext_ln67_2_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln58_2_fu_347_p3),64));
    zext_ln67_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln58_3_fu_355_p3),64));
    zext_ln70_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_fu_423_p2),64));
    zext_ln75_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_reg_1466),64));
    zext_ln83_1_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln87_1_reg_1499),12));
    zext_ln83_2_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_1_reg_1504),10));
    zext_ln83_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln81_reg_1488),10));
    zext_ln84_1_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln84_reg_1493),11));
    zext_ln84_2_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_893_p3),11));
    zext_ln84_3_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_fu_920_p2),12));
    zext_ln84_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln83_fu_653_p1),9));
    zext_ln85_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_fu_904_p2),12));
    zext_ln87_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln85_fu_676_p1),9));
    zext_ln94_1_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_1509),10));
    zext_ln94_2_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_1520),12));
    zext_ln94_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_1_reg_1525),10));
    zext_ln95_1_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_fu_985_p2),12));
    zext_ln95_2_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_715_p4),9));
    zext_ln95_3_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_1514),11));
    zext_ln95_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_958_p3),11));
    zext_ln96_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln95_fu_969_p2),12));
    zext_ln98_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_739_p4),9));
end behav;
