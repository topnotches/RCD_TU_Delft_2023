// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="color_convert_color_convert,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.520000,HLS_SYN_LAT=7,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=948,HLS_SYN_LUT=1076,HLS_VERSION=2023_2}" *)

module color_convert (
        ap_clk,
        ap_rst_n,
        stream_in_24_TDATA,
        stream_in_24_TVALID,
        stream_in_24_TREADY,
        stream_in_24_TKEEP,
        stream_in_24_TSTRB,
        stream_in_24_TUSER,
        stream_in_24_TLAST,
        stream_out_24_TDATA,
        stream_out_24_TVALID,
        stream_out_24_TREADY,
        stream_out_24_TKEEP,
        stream_out_24_TSTRB,
        stream_out_24_TUSER,
        stream_out_24_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] stream_in_24_TDATA;
input   stream_in_24_TVALID;
output   stream_in_24_TREADY;
input  [2:0] stream_in_24_TKEEP;
input  [2:0] stream_in_24_TSTRB;
input  [0:0] stream_in_24_TUSER;
input  [0:0] stream_in_24_TLAST;
output  [23:0] stream_out_24_TDATA;
output   stream_out_24_TVALID;
input   stream_out_24_TREADY;
output  [2:0] stream_out_24_TKEEP;
output  [2:0] stream_out_24_TSTRB;
output  [0:0] stream_out_24_TUSER;
output  [0:0] stream_out_24_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire  signed [9:0] c1_c1;
wire   [9:0] c1_c2;
wire   [9:0] c1_c3;
wire  signed [9:0] c2_c1;
wire   [9:0] c2_c2;
wire   [9:0] c2_c3;
wire  signed [9:0] c3_c1;
wire   [9:0] c3_c2;
wire   [9:0] c3_c3;
wire   [9:0] bias_c1;
wire   [9:0] bias_c2;
wire   [9:0] bias_c3;
reg    stream_in_24_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    stream_out_24_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg   [2:0] curr_pixel_keep_reg_983;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state7_pp0_stage0_iter6;
wire    regslice_both_stream_out_24_V_data_V_U_apdone_blk;
reg    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
reg   [2:0] curr_pixel_keep_reg_983_pp0_iter1_reg;
reg   [2:0] curr_pixel_keep_reg_983_pp0_iter2_reg;
reg   [2:0] curr_pixel_keep_reg_983_pp0_iter3_reg;
reg   [2:0] curr_pixel_keep_reg_983_pp0_iter4_reg;
reg   [2:0] curr_pixel_keep_reg_983_pp0_iter5_reg;
reg   [2:0] curr_pixel_strb_reg_988;
reg   [2:0] curr_pixel_strb_reg_988_pp0_iter1_reg;
reg   [2:0] curr_pixel_strb_reg_988_pp0_iter2_reg;
reg   [2:0] curr_pixel_strb_reg_988_pp0_iter3_reg;
reg   [2:0] curr_pixel_strb_reg_988_pp0_iter4_reg;
reg   [2:0] curr_pixel_strb_reg_988_pp0_iter5_reg;
reg   [0:0] curr_pixel_user_reg_993;
reg   [0:0] curr_pixel_user_reg_993_pp0_iter1_reg;
reg   [0:0] curr_pixel_user_reg_993_pp0_iter2_reg;
reg   [0:0] curr_pixel_user_reg_993_pp0_iter3_reg;
reg   [0:0] curr_pixel_user_reg_993_pp0_iter4_reg;
reg   [0:0] curr_pixel_user_reg_993_pp0_iter5_reg;
reg   [0:0] curr_pixel_last_reg_998;
reg   [0:0] curr_pixel_last_reg_998_pp0_iter1_reg;
reg   [0:0] curr_pixel_last_reg_998_pp0_iter2_reg;
reg   [0:0] curr_pixel_last_reg_998_pp0_iter3_reg;
reg   [0:0] curr_pixel_last_reg_998_pp0_iter4_reg;
reg   [0:0] curr_pixel_last_reg_998_pp0_iter5_reg;
reg   [7:0] v_p2_reg_1003;
reg   [7:0] v_p3_reg_1008;
wire   [17:0] zext_ln32_fu_299_p1;
reg  signed [9:0] c1_c2_read_reg_1025;
reg  signed [9:0] c1_c3_read_reg_1030;
reg   [9:0] bias_c1_read_reg_1035;
reg   [9:0] bias_c1_read_reg_1035_pp0_iter1_reg;
reg   [9:0] bias_c1_read_reg_1035_pp0_iter2_reg;
reg   [9:0] bias_c1_read_reg_1035_pp0_iter3_reg;
reg  signed [9:0] c2_c2_read_reg_1045;
reg  signed [9:0] c2_c3_read_reg_1050;
reg   [9:0] bias_c2_read_reg_1055;
reg   [9:0] bias_c2_read_reg_1055_pp0_iter1_reg;
reg   [9:0] bias_c2_read_reg_1055_pp0_iter2_reg;
reg   [9:0] bias_c2_read_reg_1055_pp0_iter3_reg;
reg  signed [9:0] c3_c2_read_reg_1065;
reg  signed [9:0] c3_c3_read_reg_1070;
reg   [9:0] bias_c3_read_reg_1075;
reg   [9:0] bias_c3_read_reg_1075_pp0_iter1_reg;
reg   [9:0] bias_c3_read_reg_1075_pp0_iter2_reg;
reg   [9:0] bias_c3_read_reg_1075_pp0_iter3_reg;
wire   [17:0] mul_ln32_1_fu_321_p2;
reg  signed [17:0] mul_ln32_1_reg_1080;
wire   [17:0] zext_ln32_2_fu_327_p1;
wire   [17:0] mul_ln33_1_fu_336_p2;
reg  signed [17:0] mul_ln33_1_reg_1097;
wire   [17:0] mul_ln34_1_fu_348_p2;
reg  signed [17:0] mul_ln34_1_reg_1107;
reg   [0:0] tmp_3_reg_1147;
reg   [0:0] tmp_3_reg_1147_pp0_iter5_reg;
reg   [7:0] trunc_ln_reg_1154;
reg   [0:0] tmp_4_reg_1159;
reg   [0:0] tmp_5_reg_1165;
reg   [3:0] tmp_reg_1170;
reg   [0:0] tmp_7_reg_1176;
reg   [0:0] tmp_7_reg_1176_pp0_iter5_reg;
reg   [7:0] trunc_ln1_reg_1183;
reg   [0:0] tmp_8_reg_1188;
reg   [0:0] tmp_9_reg_1194;
reg   [3:0] tmp_1_reg_1199;
reg   [0:0] tmp_11_reg_1205;
reg   [0:0] tmp_11_reg_1205_pp0_iter5_reg;
reg   [7:0] trunc_ln2_reg_1212;
reg   [0:0] tmp_12_reg_1217;
reg   [0:0] tmp_13_reg_1223;
reg   [3:0] tmp_2_reg_1228;
wire   [7:0] add_ln32_3_fu_558_p2;
reg   [7:0] add_ln32_3_reg_1234;
wire   [0:0] or_ln32_fu_606_p2;
reg   [0:0] or_ln32_reg_1239;
wire   [0:0] and_ln32_1_fu_617_p2;
reg   [0:0] and_ln32_1_reg_1244;
wire   [7:0] select_ln32_2_fu_641_p3;
reg   [7:0] select_ln32_2_reg_1249;
wire   [7:0] add_ln33_3_fu_652_p2;
reg   [7:0] add_ln33_3_reg_1254;
wire   [0:0] or_ln33_fu_700_p2;
reg   [0:0] or_ln33_reg_1259;
wire   [0:0] and_ln33_1_fu_711_p2;
reg   [0:0] and_ln33_1_reg_1264;
wire   [7:0] select_ln33_2_fu_735_p3;
reg   [7:0] select_ln33_2_reg_1269;
wire   [7:0] add_ln34_3_fu_746_p2;
reg   [7:0] add_ln34_3_reg_1274;
wire   [0:0] or_ln34_fu_794_p2;
reg   [0:0] or_ln34_reg_1279;
wire   [0:0] and_ln34_1_fu_805_p2;
reg   [0:0] and_ln34_1_reg_1284;
wire   [7:0] select_ln34_2_fu_829_p3;
reg   [7:0] select_ln34_2_reg_1289;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] v_p1_fu_275_p1;
wire   [7:0] mul_ln32_1_fu_321_p1;
wire   [17:0] zext_ln32_1_fu_315_p1;
wire   [7:0] mul_ln33_1_fu_336_p1;
wire   [7:0] mul_ln34_1_fu_348_p1;
wire  signed [18:0] grp_fu_929_p3;
wire  signed [18:0] grp_fu_938_p3;
wire  signed [18:0] grp_fu_947_p3;
wire   [17:0] shl_ln_fu_375_p3;
wire  signed [19:0] sext_ln32_7_fu_382_p1;
wire  signed [19:0] grp_fu_956_p3;
(* use_dsp48 = "no" *) wire   [19:0] add_ln32_2_fu_386_p2;
wire   [17:0] shl_ln1_fu_435_p3;
wire  signed [19:0] sext_ln33_7_fu_442_p1;
wire  signed [19:0] grp_fu_965_p3;
(* use_dsp48 = "no" *) wire   [19:0] add_ln33_2_fu_446_p2;
wire   [17:0] shl_ln2_fu_495_p3;
wire  signed [19:0] sext_ln34_7_fu_502_p1;
wire  signed [19:0] grp_fu_974_p3;
(* use_dsp48 = "no" *) wire   [19:0] add_ln34_2_fu_506_p2;
wire   [7:0] zext_ln32_3_fu_555_p1;
wire   [0:0] tmp_6_fu_577_p3;
wire   [0:0] icmp_ln32_1_fu_572_p2;
wire   [0:0] icmp_ln32_fu_567_p2;
wire   [0:0] select_ln32_fu_591_p3;
wire   [0:0] select_ln32_3_fu_599_p3;
wire   [0:0] xor_ln32_2_fu_585_p2;
wire   [0:0] and_ln32_fu_611_p2;
wire   [6:0] trunc_ln32_fu_563_p1;
wire   [6:0] select_ln32_1_fu_622_p3;
wire   [7:0] zext_ln32_4_fu_630_p1;
wire   [7:0] select_ln32_4_fu_634_p3;
wire   [7:0] zext_ln33_fu_649_p1;
wire   [0:0] tmp_10_fu_671_p3;
wire   [0:0] icmp_ln33_1_fu_666_p2;
wire   [0:0] icmp_ln33_fu_661_p2;
wire   [0:0] select_ln33_fu_685_p3;
wire   [0:0] select_ln33_3_fu_693_p3;
wire   [0:0] xor_ln33_2_fu_679_p2;
wire   [0:0] and_ln33_fu_705_p2;
wire   [6:0] trunc_ln33_fu_657_p1;
wire   [6:0] select_ln33_1_fu_716_p3;
wire   [7:0] zext_ln33_1_fu_724_p1;
wire   [7:0] select_ln33_4_fu_728_p3;
wire   [7:0] zext_ln34_fu_743_p1;
wire   [0:0] tmp_14_fu_765_p3;
wire   [0:0] icmp_ln34_1_fu_760_p2;
wire   [0:0] icmp_ln34_fu_755_p2;
wire   [0:0] select_ln34_fu_779_p3;
wire   [0:0] select_ln34_3_fu_787_p3;
wire   [0:0] xor_ln34_2_fu_773_p2;
wire   [0:0] and_ln34_fu_799_p2;
wire   [6:0] trunc_ln34_fu_751_p1;
wire   [6:0] select_ln34_1_fu_810_p3;
wire   [7:0] zext_ln34_1_fu_818_p1;
wire   [7:0] select_ln34_4_fu_822_p3;
wire   [0:0] xor_ln32_1_fu_842_p2;
wire   [0:0] and_ln32_2_fu_847_p2;
wire   [0:0] xor_ln32_fu_837_p2;
wire   [0:0] or_ln32_1_fu_852_p2;
wire   [0:0] xor_ln33_1_fu_869_p2;
wire   [0:0] and_ln33_2_fu_874_p2;
wire   [0:0] xor_ln33_fu_864_p2;
wire   [0:0] or_ln33_1_fu_879_p2;
wire   [0:0] xor_ln34_1_fu_896_p2;
wire   [0:0] and_ln34_2_fu_901_p2;
wire   [0:0] xor_ln34_fu_891_p2;
wire   [0:0] or_ln34_1_fu_906_p2;
wire   [7:0] out3_fu_912_p3;
wire   [7:0] out2_fu_885_p3;
wire   [7:0] out1_fu_858_p3;
wire   [7:0] grp_fu_929_p1;
wire   [7:0] grp_fu_938_p1;
wire   [7:0] grp_fu_947_p1;
wire   [7:0] grp_fu_956_p1;
wire   [7:0] grp_fu_965_p1;
wire   [7:0] grp_fu_974_p1;
reg    grp_fu_929_ce;
reg    grp_fu_938_ce;
reg    grp_fu_947_ce;
reg    grp_fu_956_ce;
reg    grp_fu_965_ce;
reg    grp_fu_974_ce;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_stream_in_24_V_data_V_U_apdone_blk;
wire   [23:0] stream_in_24_TDATA_int_regslice;
wire    stream_in_24_TVALID_int_regslice;
reg    stream_in_24_TREADY_int_regslice;
wire    regslice_both_stream_in_24_V_data_V_U_ack_in;
wire    regslice_both_stream_in_24_V_keep_V_U_apdone_blk;
wire   [2:0] stream_in_24_TKEEP_int_regslice;
wire    regslice_both_stream_in_24_V_keep_V_U_vld_out;
wire    regslice_both_stream_in_24_V_keep_V_U_ack_in;
wire    regslice_both_stream_in_24_V_strb_V_U_apdone_blk;
wire   [2:0] stream_in_24_TSTRB_int_regslice;
wire    regslice_both_stream_in_24_V_strb_V_U_vld_out;
wire    regslice_both_stream_in_24_V_strb_V_U_ack_in;
wire    regslice_both_stream_in_24_V_user_V_U_apdone_blk;
wire   [0:0] stream_in_24_TUSER_int_regslice;
wire    regslice_both_stream_in_24_V_user_V_U_vld_out;
wire    regslice_both_stream_in_24_V_user_V_U_ack_in;
wire    regslice_both_stream_in_24_V_last_V_U_apdone_blk;
wire   [0:0] stream_in_24_TLAST_int_regslice;
wire    regslice_both_stream_in_24_V_last_V_U_vld_out;
wire    regslice_both_stream_in_24_V_last_V_U_ack_in;
wire   [23:0] stream_out_24_TDATA_int_regslice;
reg    stream_out_24_TVALID_int_regslice;
wire    stream_out_24_TREADY_int_regslice;
wire    regslice_both_stream_out_24_V_data_V_U_vld_out;
wire    regslice_both_stream_out_24_V_keep_V_U_apdone_blk;
wire    regslice_both_stream_out_24_V_keep_V_U_ack_in_dummy;
wire    regslice_both_stream_out_24_V_keep_V_U_vld_out;
wire    regslice_both_stream_out_24_V_strb_V_U_apdone_blk;
wire    regslice_both_stream_out_24_V_strb_V_U_ack_in_dummy;
wire    regslice_both_stream_out_24_V_strb_V_U_vld_out;
wire    regslice_both_stream_out_24_V_user_V_U_apdone_blk;
wire    regslice_both_stream_out_24_V_user_V_U_ack_in_dummy;
wire    regslice_both_stream_out_24_V_user_V_U_vld_out;
wire    regslice_both_stream_out_24_V_last_V_U_apdone_blk;
wire    regslice_both_stream_out_24_V_last_V_U_ack_in_dummy;
wire    regslice_both_stream_out_24_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

color_convert_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .c1_c1(c1_c1),
    .c1_c2(c1_c2),
    .c1_c3(c1_c3),
    .c2_c1(c2_c1),
    .c2_c2(c2_c2),
    .c2_c3(c2_c3),
    .c3_c1(c3_c1),
    .c3_c2(c3_c2),
    .c3_c3(c3_c3),
    .bias_c1(bias_c1),
    .bias_c2(bias_c2),
    .bias_c3(bias_c3)
);

color_convert_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U1(
    .din0(c1_c2_read_reg_1025),
    .din1(mul_ln32_1_fu_321_p1),
    .dout(mul_ln32_1_fu_321_p2)
);

color_convert_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U2(
    .din0(c2_c2_read_reg_1045),
    .din1(mul_ln33_1_fu_336_p1),
    .dout(mul_ln33_1_fu_336_p2)
);

color_convert_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U3(
    .din0(c3_c2_read_reg_1065),
    .din1(mul_ln34_1_fu_348_p1),
    .dout(mul_ln34_1_fu_348_p2)
);

color_convert_mac_muladd_10s_8ns_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_10s_8ns_18s_19_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c1_c1),
    .din1(grp_fu_929_p1),
    .din2(mul_ln32_1_reg_1080),
    .ce(grp_fu_929_ce),
    .dout(grp_fu_929_p3)
);

color_convert_mac_muladd_10s_8ns_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_10s_8ns_18s_19_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c2_c1),
    .din1(grp_fu_938_p1),
    .din2(mul_ln33_1_reg_1097),
    .ce(grp_fu_938_ce),
    .dout(grp_fu_938_p3)
);

color_convert_mac_muladd_10s_8ns_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_10s_8ns_18s_19_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c3_c1),
    .din1(grp_fu_947_p1),
    .din2(mul_ln34_1_reg_1107),
    .ce(grp_fu_947_ce),
    .dout(grp_fu_947_p3)
);

color_convert_mac_muladd_10s_8ns_19s_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
mac_muladd_10s_8ns_19s_20_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c1_c3_read_reg_1030),
    .din1(grp_fu_956_p1),
    .din2(grp_fu_929_p3),
    .ce(grp_fu_956_ce),
    .dout(grp_fu_956_p3)
);

color_convert_mac_muladd_10s_8ns_19s_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
mac_muladd_10s_8ns_19s_20_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c2_c3_read_reg_1050),
    .din1(grp_fu_965_p1),
    .din2(grp_fu_938_p3),
    .ce(grp_fu_965_ce),
    .dout(grp_fu_965_p3)
);

color_convert_mac_muladd_10s_8ns_19s_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
mac_muladd_10s_8ns_19s_20_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c3_c3_read_reg_1070),
    .din1(grp_fu_974_p1),
    .din2(grp_fu_947_p3),
    .ce(grp_fu_974_ce),
    .dout(grp_fu_974_p3)
);

color_convert_regslice_both #(
    .DataWidth( 24 ))
regslice_both_stream_in_24_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_24_TDATA),
    .vld_in(stream_in_24_TVALID),
    .ack_in(regslice_both_stream_in_24_V_data_V_U_ack_in),
    .data_out(stream_in_24_TDATA_int_regslice),
    .vld_out(stream_in_24_TVALID_int_regslice),
    .ack_out(stream_in_24_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_24_V_data_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 3 ))
regslice_both_stream_in_24_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_24_TKEEP),
    .vld_in(stream_in_24_TVALID),
    .ack_in(regslice_both_stream_in_24_V_keep_V_U_ack_in),
    .data_out(stream_in_24_TKEEP_int_regslice),
    .vld_out(regslice_both_stream_in_24_V_keep_V_U_vld_out),
    .ack_out(stream_in_24_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_24_V_keep_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 3 ))
regslice_both_stream_in_24_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_24_TSTRB),
    .vld_in(stream_in_24_TVALID),
    .ack_in(regslice_both_stream_in_24_V_strb_V_U_ack_in),
    .data_out(stream_in_24_TSTRB_int_regslice),
    .vld_out(regslice_both_stream_in_24_V_strb_V_U_vld_out),
    .ack_out(stream_in_24_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_24_V_strb_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_in_24_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_24_TUSER),
    .vld_in(stream_in_24_TVALID),
    .ack_in(regslice_both_stream_in_24_V_user_V_U_ack_in),
    .data_out(stream_in_24_TUSER_int_regslice),
    .vld_out(regslice_both_stream_in_24_V_user_V_U_vld_out),
    .ack_out(stream_in_24_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_24_V_user_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_in_24_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_24_TLAST),
    .vld_in(stream_in_24_TVALID),
    .ack_in(regslice_both_stream_in_24_V_last_V_U_ack_in),
    .data_out(stream_in_24_TLAST_int_regslice),
    .vld_out(regslice_both_stream_in_24_V_last_V_U_vld_out),
    .ack_out(stream_in_24_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_24_V_last_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 24 ))
regslice_both_stream_out_24_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_out_24_TDATA_int_regslice),
    .vld_in(stream_out_24_TVALID_int_regslice),
    .ack_in(stream_out_24_TREADY_int_regslice),
    .data_out(stream_out_24_TDATA),
    .vld_out(regslice_both_stream_out_24_V_data_V_U_vld_out),
    .ack_out(stream_out_24_TREADY),
    .apdone_blk(regslice_both_stream_out_24_V_data_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 3 ))
regslice_both_stream_out_24_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_keep_reg_983_pp0_iter5_reg),
    .vld_in(stream_out_24_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_24_V_keep_V_U_ack_in_dummy),
    .data_out(stream_out_24_TKEEP),
    .vld_out(regslice_both_stream_out_24_V_keep_V_U_vld_out),
    .ack_out(stream_out_24_TREADY),
    .apdone_blk(regslice_both_stream_out_24_V_keep_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 3 ))
regslice_both_stream_out_24_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_strb_reg_988_pp0_iter5_reg),
    .vld_in(stream_out_24_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_24_V_strb_V_U_ack_in_dummy),
    .data_out(stream_out_24_TSTRB),
    .vld_out(regslice_both_stream_out_24_V_strb_V_U_vld_out),
    .ack_out(stream_out_24_TREADY),
    .apdone_blk(regslice_both_stream_out_24_V_strb_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_out_24_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_user_reg_993_pp0_iter5_reg),
    .vld_in(stream_out_24_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_24_V_user_V_U_ack_in_dummy),
    .data_out(stream_out_24_TUSER),
    .vld_out(regslice_both_stream_out_24_V_user_V_U_vld_out),
    .ack_out(stream_out_24_TREADY),
    .apdone_blk(regslice_both_stream_out_24_V_user_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_out_24_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_last_reg_998_pp0_iter5_reg),
    .vld_in(stream_out_24_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_24_V_last_V_U_ack_in_dummy),
    .data_out(stream_out_24_TLAST),
    .vld_out(regslice_both_stream_out_24_V_last_V_U_vld_out),
    .ack_out(stream_out_24_TREADY),
    .apdone_blk(regslice_both_stream_out_24_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln32_3_reg_1234 <= add_ln32_3_fu_558_p2;
        add_ln33_3_reg_1254 <= add_ln33_3_fu_652_p2;
        add_ln34_3_reg_1274 <= add_ln34_3_fu_746_p2;
        and_ln32_1_reg_1244 <= and_ln32_1_fu_617_p2;
        and_ln33_1_reg_1264 <= and_ln33_1_fu_711_p2;
        and_ln34_1_reg_1284 <= and_ln34_1_fu_805_p2;
        bias_c1_read_reg_1035_pp0_iter2_reg <= bias_c1_read_reg_1035_pp0_iter1_reg;
        bias_c1_read_reg_1035_pp0_iter3_reg <= bias_c1_read_reg_1035_pp0_iter2_reg;
        bias_c2_read_reg_1055_pp0_iter2_reg <= bias_c2_read_reg_1055_pp0_iter1_reg;
        bias_c2_read_reg_1055_pp0_iter3_reg <= bias_c2_read_reg_1055_pp0_iter2_reg;
        bias_c3_read_reg_1075_pp0_iter2_reg <= bias_c3_read_reg_1075_pp0_iter1_reg;
        bias_c3_read_reg_1075_pp0_iter3_reg <= bias_c3_read_reg_1075_pp0_iter2_reg;
        curr_pixel_keep_reg_983_pp0_iter2_reg <= curr_pixel_keep_reg_983_pp0_iter1_reg;
        curr_pixel_keep_reg_983_pp0_iter3_reg <= curr_pixel_keep_reg_983_pp0_iter2_reg;
        curr_pixel_keep_reg_983_pp0_iter4_reg <= curr_pixel_keep_reg_983_pp0_iter3_reg;
        curr_pixel_keep_reg_983_pp0_iter5_reg <= curr_pixel_keep_reg_983_pp0_iter4_reg;
        curr_pixel_last_reg_998_pp0_iter2_reg <= curr_pixel_last_reg_998_pp0_iter1_reg;
        curr_pixel_last_reg_998_pp0_iter3_reg <= curr_pixel_last_reg_998_pp0_iter2_reg;
        curr_pixel_last_reg_998_pp0_iter4_reg <= curr_pixel_last_reg_998_pp0_iter3_reg;
        curr_pixel_last_reg_998_pp0_iter5_reg <= curr_pixel_last_reg_998_pp0_iter4_reg;
        curr_pixel_strb_reg_988_pp0_iter2_reg <= curr_pixel_strb_reg_988_pp0_iter1_reg;
        curr_pixel_strb_reg_988_pp0_iter3_reg <= curr_pixel_strb_reg_988_pp0_iter2_reg;
        curr_pixel_strb_reg_988_pp0_iter4_reg <= curr_pixel_strb_reg_988_pp0_iter3_reg;
        curr_pixel_strb_reg_988_pp0_iter5_reg <= curr_pixel_strb_reg_988_pp0_iter4_reg;
        curr_pixel_user_reg_993_pp0_iter2_reg <= curr_pixel_user_reg_993_pp0_iter1_reg;
        curr_pixel_user_reg_993_pp0_iter3_reg <= curr_pixel_user_reg_993_pp0_iter2_reg;
        curr_pixel_user_reg_993_pp0_iter4_reg <= curr_pixel_user_reg_993_pp0_iter3_reg;
        curr_pixel_user_reg_993_pp0_iter5_reg <= curr_pixel_user_reg_993_pp0_iter4_reg;
        or_ln32_reg_1239 <= or_ln32_fu_606_p2;
        or_ln33_reg_1259 <= or_ln33_fu_700_p2;
        or_ln34_reg_1279 <= or_ln34_fu_794_p2;
        select_ln32_2_reg_1249 <= select_ln32_2_fu_641_p3;
        select_ln33_2_reg_1269 <= select_ln33_2_fu_735_p3;
        select_ln34_2_reg_1289 <= select_ln34_2_fu_829_p3;
        tmp_11_reg_1205 <= add_ln34_2_fu_506_p2[32'd19];
        tmp_11_reg_1205_pp0_iter5_reg <= tmp_11_reg_1205;
        tmp_12_reg_1217 <= add_ln34_2_fu_506_p2[32'd15];
        tmp_13_reg_1223 <= add_ln34_2_fu_506_p2[32'd7];
        tmp_1_reg_1199 <= {{add_ln33_2_fu_446_p2[19:16]}};
        tmp_2_reg_1228 <= {{add_ln34_2_fu_506_p2[19:16]}};
        tmp_3_reg_1147 <= add_ln32_2_fu_386_p2[32'd19];
        tmp_3_reg_1147_pp0_iter5_reg <= tmp_3_reg_1147;
        tmp_4_reg_1159 <= add_ln32_2_fu_386_p2[32'd15];
        tmp_5_reg_1165 <= add_ln32_2_fu_386_p2[32'd7];
        tmp_7_reg_1176 <= add_ln33_2_fu_446_p2[32'd19];
        tmp_7_reg_1176_pp0_iter5_reg <= tmp_7_reg_1176;
        tmp_8_reg_1188 <= add_ln33_2_fu_446_p2[32'd15];
        tmp_9_reg_1194 <= add_ln33_2_fu_446_p2[32'd7];
        tmp_reg_1170 <= {{add_ln32_2_fu_386_p2[19:16]}};
        trunc_ln1_reg_1183 <= {{add_ln33_2_fu_446_p2[15:8]}};
        trunc_ln2_reg_1212 <= {{add_ln34_2_fu_506_p2[15:8]}};
        trunc_ln_reg_1154 <= {{add_ln32_2_fu_386_p2[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_c1_read_reg_1035 <= bias_c1;
        bias_c1_read_reg_1035_pp0_iter1_reg <= bias_c1_read_reg_1035;
        bias_c2_read_reg_1055 <= bias_c2;
        bias_c2_read_reg_1055_pp0_iter1_reg <= bias_c2_read_reg_1055;
        bias_c3_read_reg_1075 <= bias_c3;
        bias_c3_read_reg_1075_pp0_iter1_reg <= bias_c3_read_reg_1075;
        c1_c2_read_reg_1025 <= c1_c2;
        c1_c3_read_reg_1030 <= c1_c3;
        c2_c2_read_reg_1045 <= c2_c2;
        c2_c3_read_reg_1050 <= c2_c3;
        c3_c2_read_reg_1065 <= c3_c2;
        c3_c3_read_reg_1070 <= c3_c3;
        curr_pixel_keep_reg_983 <= stream_in_24_TKEEP_int_regslice;
        curr_pixel_keep_reg_983_pp0_iter1_reg <= curr_pixel_keep_reg_983;
        curr_pixel_last_reg_998 <= stream_in_24_TLAST_int_regslice;
        curr_pixel_last_reg_998_pp0_iter1_reg <= curr_pixel_last_reg_998;
        curr_pixel_strb_reg_988 <= stream_in_24_TSTRB_int_regslice;
        curr_pixel_strb_reg_988_pp0_iter1_reg <= curr_pixel_strb_reg_988;
        curr_pixel_user_reg_993 <= stream_in_24_TUSER_int_regslice;
        curr_pixel_user_reg_993_pp0_iter1_reg <= curr_pixel_user_reg_993;
        mul_ln32_1_reg_1080 <= mul_ln32_1_fu_321_p2;
        mul_ln33_1_reg_1097 <= mul_ln33_1_fu_336_p2;
        mul_ln34_1_reg_1107 <= mul_ln34_1_fu_348_p2;
        v_p2_reg_1003 <= {{stream_in_24_TDATA_int_regslice[15:8]}};
        v_p3_reg_1008 <= {{stream_in_24_TDATA_int_regslice[23:16]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_929_ce = 1'b1;
    end else begin
        grp_fu_929_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_938_ce = 1'b1;
    end else begin
        grp_fu_938_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_947_ce = 1'b1;
    end else begin
        grp_fu_947_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_956_ce = 1'b1;
    end else begin
        grp_fu_956_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_965_ce = 1'b1;
    end else begin
        grp_fu_965_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_974_ce = 1'b1;
    end else begin
        grp_fu_974_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_24_TDATA_blk_n = stream_in_24_TVALID_int_regslice;
    end else begin
        stream_in_24_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_24_TREADY_int_regslice = 1'b1;
    end else begin
        stream_in_24_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        stream_out_24_TDATA_blk_n = stream_out_24_TREADY_int_regslice;
    end else begin
        stream_out_24_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        stream_out_24_TVALID_int_regslice = 1'b1;
    end else begin
        stream_out_24_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_2_fu_386_p2 = ($signed(sext_ln32_7_fu_382_p1) + $signed(grp_fu_956_p3));

assign add_ln32_3_fu_558_p2 = (zext_ln32_3_fu_555_p1 + trunc_ln_reg_1154);

assign add_ln33_2_fu_446_p2 = ($signed(sext_ln33_7_fu_442_p1) + $signed(grp_fu_965_p3));

assign add_ln33_3_fu_652_p2 = (zext_ln33_fu_649_p1 + trunc_ln1_reg_1183);

assign add_ln34_2_fu_506_p2 = ($signed(sext_ln34_7_fu_502_p1) + $signed(grp_fu_974_p3));

assign add_ln34_3_fu_746_p2 = (zext_ln34_fu_743_p1 + trunc_ln2_reg_1212);

assign and_ln32_1_fu_617_p2 = (tmp_4_reg_1159 & and_ln32_fu_611_p2);

assign and_ln32_2_fu_847_p2 = (xor_ln32_1_fu_842_p2 & tmp_3_reg_1147_pp0_iter5_reg);

assign and_ln32_fu_611_p2 = (xor_ln32_2_fu_585_p2 & icmp_ln32_fu_567_p2);

assign and_ln33_1_fu_711_p2 = (tmp_8_reg_1188 & and_ln33_fu_705_p2);

assign and_ln33_2_fu_874_p2 = (xor_ln33_1_fu_869_p2 & tmp_7_reg_1176_pp0_iter5_reg);

assign and_ln33_fu_705_p2 = (xor_ln33_2_fu_679_p2 & icmp_ln33_fu_661_p2);

assign and_ln34_1_fu_805_p2 = (tmp_12_reg_1217 & and_ln34_fu_799_p2);

assign and_ln34_2_fu_901_p2 = (xor_ln34_1_fu_896_p2 & tmp_11_reg_1205_pp0_iter5_reg);

assign and_ln34_fu_799_p2 = (xor_ln34_2_fu_773_p2 & icmp_ln34_fu_755_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_pp0_stage0_iter7)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state7_pp0_stage0_iter6)) | ((1'b1 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter7 == 1'b1) & ((stream_out_24_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state8_pp0_stage0_iter7))) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((stream_out_24_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state7_pp0_stage0_iter6))) | ((1'b1 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter7 == 1'b1) & ((stream_out_24_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state8_pp0_stage0_iter7))) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((stream_out_24_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state7_pp0_stage0_iter6))) | ((1'b1 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (stream_in_24_TVALID_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = (stream_out_24_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = ((stream_out_24_TREADY_int_regslice == 1'b0) | (regslice_both_stream_out_24_V_data_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_929_p1 = zext_ln32_fu_299_p1;

assign grp_fu_938_p1 = zext_ln32_fu_299_p1;

assign grp_fu_947_p1 = zext_ln32_fu_299_p1;

assign grp_fu_956_p1 = zext_ln32_2_fu_327_p1;

assign grp_fu_965_p1 = zext_ln32_2_fu_327_p1;

assign grp_fu_974_p1 = zext_ln32_2_fu_327_p1;

assign icmp_ln32_1_fu_572_p2 = ((tmp_reg_1170 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_567_p2 = ((tmp_reg_1170 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_666_p2 = ((tmp_1_reg_1199 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_661_p2 = ((tmp_1_reg_1199 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_760_p2 = ((tmp_2_reg_1228 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_755_p2 = ((tmp_2_reg_1228 == 4'd15) ? 1'b1 : 1'b0);

assign mul_ln32_1_fu_321_p1 = zext_ln32_1_fu_315_p1;

assign mul_ln33_1_fu_336_p1 = zext_ln32_1_fu_315_p1;

assign mul_ln34_1_fu_348_p1 = zext_ln32_1_fu_315_p1;

assign or_ln32_1_fu_852_p2 = (xor_ln32_fu_837_p2 | and_ln32_2_fu_847_p2);

assign or_ln32_fu_606_p2 = (tmp_3_reg_1147 | select_ln32_3_fu_599_p3);

assign or_ln33_1_fu_879_p2 = (xor_ln33_fu_864_p2 | and_ln33_2_fu_874_p2);

assign or_ln33_fu_700_p2 = (tmp_7_reg_1176 | select_ln33_3_fu_693_p3);

assign or_ln34_1_fu_906_p2 = (xor_ln34_fu_891_p2 | and_ln34_2_fu_901_p2);

assign or_ln34_fu_794_p2 = (tmp_11_reg_1205 | select_ln34_3_fu_787_p3);

assign out1_fu_858_p3 = ((or_ln32_1_fu_852_p2[0:0] == 1'b1) ? select_ln32_2_reg_1249 : add_ln32_3_reg_1234);

assign out2_fu_885_p3 = ((or_ln33_1_fu_879_p2[0:0] == 1'b1) ? select_ln33_2_reg_1269 : add_ln33_3_reg_1254);

assign out3_fu_912_p3 = ((or_ln34_1_fu_906_p2[0:0] == 1'b1) ? select_ln34_2_reg_1289 : add_ln34_3_reg_1274);

assign select_ln32_1_fu_622_p3 = ((and_ln32_1_fu_617_p2[0:0] == 1'b1) ? trunc_ln32_fu_563_p1 : 7'd0);

assign select_ln32_2_fu_641_p3 = ((or_ln32_fu_606_p2[0:0] == 1'b1) ? select_ln32_4_fu_634_p3 : 8'd255);

assign select_ln32_3_fu_599_p3 = ((tmp_4_reg_1159[0:0] == 1'b1) ? select_ln32_fu_591_p3 : icmp_ln32_1_fu_572_p2);

assign select_ln32_4_fu_634_p3 = ((tmp_3_reg_1147[0:0] == 1'b1) ? zext_ln32_4_fu_630_p1 : add_ln32_3_fu_558_p2);

assign select_ln32_fu_591_p3 = ((tmp_6_fu_577_p3[0:0] == 1'b1) ? icmp_ln32_1_fu_572_p2 : icmp_ln32_fu_567_p2);

assign select_ln33_1_fu_716_p3 = ((and_ln33_1_fu_711_p2[0:0] == 1'b1) ? trunc_ln33_fu_657_p1 : 7'd0);

assign select_ln33_2_fu_735_p3 = ((or_ln33_fu_700_p2[0:0] == 1'b1) ? select_ln33_4_fu_728_p3 : 8'd255);

assign select_ln33_3_fu_693_p3 = ((tmp_8_reg_1188[0:0] == 1'b1) ? select_ln33_fu_685_p3 : icmp_ln33_1_fu_666_p2);

assign select_ln33_4_fu_728_p3 = ((tmp_7_reg_1176[0:0] == 1'b1) ? zext_ln33_1_fu_724_p1 : add_ln33_3_fu_652_p2);

assign select_ln33_fu_685_p3 = ((tmp_10_fu_671_p3[0:0] == 1'b1) ? icmp_ln33_1_fu_666_p2 : icmp_ln33_fu_661_p2);

assign select_ln34_1_fu_810_p3 = ((and_ln34_1_fu_805_p2[0:0] == 1'b1) ? trunc_ln34_fu_751_p1 : 7'd0);

assign select_ln34_2_fu_829_p3 = ((or_ln34_fu_794_p2[0:0] == 1'b1) ? select_ln34_4_fu_822_p3 : 8'd255);

assign select_ln34_3_fu_787_p3 = ((tmp_12_reg_1217[0:0] == 1'b1) ? select_ln34_fu_779_p3 : icmp_ln34_1_fu_760_p2);

assign select_ln34_4_fu_822_p3 = ((tmp_11_reg_1205[0:0] == 1'b1) ? zext_ln34_1_fu_818_p1 : add_ln34_3_fu_746_p2);

assign select_ln34_fu_779_p3 = ((tmp_14_fu_765_p3[0:0] == 1'b1) ? icmp_ln34_1_fu_760_p2 : icmp_ln34_fu_755_p2);

assign sext_ln32_7_fu_382_p1 = $signed(shl_ln_fu_375_p3);

assign sext_ln33_7_fu_442_p1 = $signed(shl_ln1_fu_435_p3);

assign sext_ln34_7_fu_502_p1 = $signed(shl_ln2_fu_495_p3);

assign shl_ln1_fu_435_p3 = {{bias_c2_read_reg_1055_pp0_iter3_reg}, {8'd0}};

assign shl_ln2_fu_495_p3 = {{bias_c3_read_reg_1075_pp0_iter3_reg}, {8'd0}};

assign shl_ln_fu_375_p3 = {{bias_c1_read_reg_1035_pp0_iter3_reg}, {8'd0}};

assign stream_in_24_TREADY = regslice_both_stream_in_24_V_data_V_U_ack_in;

assign stream_out_24_TDATA_int_regslice = {{{out3_fu_912_p3}, {out2_fu_885_p3}}, {out1_fu_858_p3}};

assign stream_out_24_TVALID = regslice_both_stream_out_24_V_data_V_U_vld_out;

assign tmp_10_fu_671_p3 = add_ln33_3_fu_652_p2[32'd7];

assign tmp_14_fu_765_p3 = add_ln34_3_fu_746_p2[32'd7];

assign tmp_6_fu_577_p3 = add_ln32_3_fu_558_p2[32'd7];

assign trunc_ln32_fu_563_p1 = add_ln32_3_fu_558_p2[6:0];

assign trunc_ln33_fu_657_p1 = add_ln33_3_fu_652_p2[6:0];

assign trunc_ln34_fu_751_p1 = add_ln34_3_fu_746_p2[6:0];

assign v_p1_fu_275_p1 = stream_in_24_TDATA_int_regslice[7:0];

assign xor_ln32_1_fu_842_p2 = (1'd1 ^ and_ln32_1_reg_1244);

assign xor_ln32_2_fu_585_p2 = (tmp_6_fu_577_p3 ^ 1'd1);

assign xor_ln32_fu_837_p2 = (or_ln32_reg_1239 ^ 1'd1);

assign xor_ln33_1_fu_869_p2 = (1'd1 ^ and_ln33_1_reg_1264);

assign xor_ln33_2_fu_679_p2 = (tmp_10_fu_671_p3 ^ 1'd1);

assign xor_ln33_fu_864_p2 = (or_ln33_reg_1259 ^ 1'd1);

assign xor_ln34_1_fu_896_p2 = (1'd1 ^ and_ln34_1_reg_1284);

assign xor_ln34_2_fu_773_p2 = (tmp_14_fu_765_p3 ^ 1'd1);

assign xor_ln34_fu_891_p2 = (or_ln34_reg_1279 ^ 1'd1);

assign zext_ln32_1_fu_315_p1 = v_p2_reg_1003;

assign zext_ln32_2_fu_327_p1 = v_p3_reg_1008;

assign zext_ln32_3_fu_555_p1 = tmp_5_reg_1165;

assign zext_ln32_4_fu_630_p1 = select_ln32_1_fu_622_p3;

assign zext_ln32_fu_299_p1 = v_p1_fu_275_p1;

assign zext_ln33_1_fu_724_p1 = select_ln33_1_fu_716_p3;

assign zext_ln33_fu_649_p1 = tmp_9_reg_1194;

assign zext_ln34_1_fu_818_p1 = select_ln34_1_fu_810_p3;

assign zext_ln34_fu_743_p1 = tmp_13_reg_1223;


reg find_kernel_block = 0;
// synthesis translate_off
`include "color_convert_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //color_convert

